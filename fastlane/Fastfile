# Customize this file, documentation can be found here:
# https://docs.fastlane.tools/actions/
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
min_fastlane_version('2.73.0')

# This value helps us track success metrics for Fastfiles
# we automatically generate. Feel free to remove this line
# once you get things running smoothly!
generated_fastfile_id '10696c64-ce3d-48da-b71b-5ad26e08af52'

default_platform :ios

platform :ios do
  before_all do
    git_pull(only_tags: true)
    ENV['DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS'] = '-t DAV'
    ENV['FASTLANE_ITUNES_TRANSPORTER_USE_SHELL_SCRIPT'] = '1'
  end

  after_all do
    push_git_tags
  end

  def load_keys
    import('keys')
  rescue StandardError => exception
    UI.error('fastlane/keys file not found. To use this Fastfile, copy fastlane/keys.template into fastlane/keys and fill in the values')
    raise exception
  end

  def change_log_since_last_tag(version_number)
    # http://git-scm.com/docs/pretty-formats
    # <short hash> <commit title>
    changelog_from_git_commits(
      pretty: '%h %s',
      commits_count: sh("git cherry #{version_number} | wc -l").to_i,
      date_format: 'short',
      match_lightweight_tag: false,
      merge_commit_filtering: 'exclude_merges'
    )
  end

  def version_string(version_number, build_number)
    "#{version_number} (#{build_number})"
  end

  private_lane :verify_xcode_version do
    ensure_xcode_version(version: '10')
  end

  desc '获取最新的 证书 与 配置文件'
  lane :setup_signing do
    keychain_name = ENV['KEYCHAIN_NAME']
    keychain_password = ENV['KEYCHAIN_PASSWORD']
    sync_code_signing(
      git_url: 'git@gitlab.com:homeworld.life/certificates.git',
      app_identifier: 'life.homeworld.app.vpser',
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      type: 'development',
      clone_branch_directly: true,
      readonly: true
    )
    sync_code_signing(
      git_url: 'git@gitlab.com:homeworld.life/certificates.git',
      app_identifier: 'life.homeworld.app.vpser',
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      type: 'appstore',
      clone_branch_directly: true,
      readonly: true
    )
  end

  desc '自动截图'
  lane :screenshots do
    load_keys
    capture_screenshots
    frame_screenshots
  end

  lane :update_metadata do
    load_keys

    deliver
  end

  desc 'Runs all the tests'
  lane :test do
    scan(
      workspace: './ios/vpser.xcworkspace',
      devices: ['iPhone X']
    )
  end

  desc '提交一个新的测试版本 Apple TestFlight'
  lane :beta do |options|
    load_keys

    only_build = options[:only_build]

    # ensure_git_branch(
    #   branch: '(master|release\\S+|hotfix\\S+)'
    # )

    unless only_build

      ensure_git_status_clean

      verify_xcode_version

      pre_version_number = get_version_number(xcodeproj: './ios/vpser.xcodeproj')
      pre_build_number = get_build_number(xcodeproj: './ios/vpser.xcodeproj')
      pre_complete_version_number = version_string(pre_version_number, pre_build_number)

      version_number = options[:version_number]

      if version_number.nil?
        # Get the recent tags of the branch as the version number
        version_number = (sh 'git describe --tags --abbrev=0').gsub(/^[v]/, '').chomp
      end

      increment_version_number(
        version_number: version_number,
        xcodeproj: './ios/vpser.xcodeproj'
      )
      # Get testflight build_number + 1
      # initial_build_number = get_build_number(xcodeproj: './ios/vpser.xcodeproj')
      build_number = latest_testflight_build_number(
        version: version_number
        # initial_build_number: initial_build_number
      ) + 1
      increment_build_number(
        build_number: build_number,
        xcodeproj: './ios/vpser.xcodeproj'
      )
      complete_version_number = version_string(version_number, build_number)

      if pre_complete_version_number != complete_version_number
        commit_version_bump(
          message: "Version bump to #{complete_version_number}",
          xcodeproj: './ios/vpser.xcodeproj'
        )
        git_version_number = (sh 'git describe --tags --abbrev=0').gsub(/^[v]/, '').chomp
        add_git_tag(tag: version_number) if git_version_number != version_number
      end

      change_log = change_log_since_last_tag(pre_version_number)

      skip_metadata = options[:skip_metadata]

      if skip_metadata == true
        UI.message('Skipping taking screenshots and uploading metadata'.green)
      else
        clear_derived_data
        screenshots
        update_metadata
      end

      clean_build_artifacts
      clear_derived_data
    end

    cocoapods(podfile: './ios/Podfile')
    build_app(
      scheme: 'vpser',
      workspace: './ios/vpser.xcworkspace',
      configuration: 'Release',
      output_directory: './ios/build',
      silent: true,
      clean: true
    )

    unless only_build
      testflight(
        changelog: change_log,
        skip_submission: true,
        distribute_external: false,
        beta_app_feedback_email: 'limaofeng@msn.com',
        beta_app_description: 'Vpser can help you manage your vps, support vultr'
      )

      slack(
        message: "Submitted build of vpsny to TestFlight: v#{complete_version_number}",
        channel: '#general'
      )
    end

    rocket
  end

  desc '部署一个新版本到 App Store'
  lane :release do
    appstore(force: true)
  end

  # If the weekly task fails, then ship a message, a success would also send
  error do |_, exception|
    slack(message: "Error Deploying Emission: #{exception}",
          success: false,
          payload: { Output: exception.error_info.to_s })
  end
end
